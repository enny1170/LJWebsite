// <auto-generated />
using System;
using LJWebsite.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LJWebsite.Migrations
{
    [DbContext(typeof(LjWebContext))]
    [Migration("20181029110120_device")]
    partial class device
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("LJWebsite.Models.Entities.ColorKey", b =>
                {
                    b.Property<int>("ColorID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ColorID");

                    b.ToTable("ColorKeys");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.ControllerFunction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("ControllerFunctions");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.Fixture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("ManualUrl");

                    b.Property<int>("MaxChannels");

                    b.Property<string>("PartNr")
                        .HasMaxLength(50);

                    b.Property<string>("Vendor")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FixtureFunction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ControllerFunctionID");

                    b.Property<string>("Description");

                    b.Property<int>("FixtureID");

                    b.Property<bool>("MultiChannel");

                    b.HasKey("ID");

                    b.HasIndex("ControllerFunctionID");

                    b.HasIndex("FixtureID");

                    b.ToTable("FixtureFunctions");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FixtureFunctionValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ColorKeyId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("FixtureFunctionID");

                    b.Property<int>("ValueRangeFrom");

                    b.Property<int>("ValueRangeTo");

                    b.HasKey("ID");

                    b.HasIndex("ColorKeyId");

                    b.HasIndex("FixtureFunctionID");

                    b.ToTable("FixtureFunctionValues");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FixtureFunctionValue");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FunctionTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ControllerFunctionID");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("MultiChannel");

                    b.HasKey("ID");

                    b.HasIndex("ControllerFunctionID");

                    b.ToTable("FunctionTemplates");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FunctionTemplateValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ColorKeyId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("FunctionTemplateID");

                    b.Property<int?>("FunctionTemplateID2");

                    b.Property<int>("ValueRangeFrom");

                    b.Property<int>("ValueRangeTo");

                    b.HasKey("ID");

                    b.HasIndex("ColorKeyId");

                    b.HasIndex("FunctionTemplateID");

                    b.HasIndex("FunctionTemplateID2");

                    b.ToTable("FunctionTemplateValues");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FunctionTemplateValue");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FixtureFunctionChannel", b =>
                {
                    b.HasBaseType("LJWebsite.Models.Entities.FixtureFunctionValue");

                    b.Property<int>("Channel");

                    b.Property<int?>("FixtureFunctionID1");

                    b.HasIndex("FixtureFunctionID1");

                    b.ToTable("FixtureFunctionChannel");

                    b.HasDiscriminator().HasValue("FixtureFunctionChannel");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FunctionTemplateChannel", b =>
                {
                    b.HasBaseType("LJWebsite.Models.Entities.FunctionTemplateValue");

                    b.Property<int>("Channel");

                    b.Property<int?>("FunctionTemplateID1");

                    b.HasIndex("FunctionTemplateID1");

                    b.ToTable("FunctionTemplateChannel");

                    b.HasDiscriminator().HasValue("FunctionTemplateChannel");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FixtureFunction", b =>
                {
                    b.HasOne("LJWebsite.Models.Entities.ControllerFunction", "ControllerFunction")
                        .WithMany()
                        .HasForeignKey("ControllerFunctionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LJWebsite.Models.Entities.Fixture", "Fixture")
                        .WithMany("FixtureFunction")
                        .HasForeignKey("FixtureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FixtureFunctionValue", b =>
                {
                    b.HasOne("LJWebsite.Models.Entities.ColorKey", "Color")
                        .WithMany()
                        .HasForeignKey("ColorKeyId");

                    b.HasOne("LJWebsite.Models.Entities.FixtureFunction", "FixtureFunction")
                        .WithMany("FixtureFunctionValue")
                        .HasForeignKey("FixtureFunctionID");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FunctionTemplate", b =>
                {
                    b.HasOne("LJWebsite.Models.Entities.ControllerFunction", "ControllerFunction")
                        .WithMany("FunctionTemplates")
                        .HasForeignKey("ControllerFunctionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FunctionTemplateValue", b =>
                {
                    b.HasOne("LJWebsite.Models.Entities.ColorKey", "Color")
                        .WithMany()
                        .HasForeignKey("ColorKeyId");

                    b.HasOne("LJWebsite.Models.Entities.FunctionTemplate", "FunctionTemplate")
                        .WithMany()
                        .HasForeignKey("FunctionTemplateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LJWebsite.Models.Entities.FunctionTemplate")
                        .WithMany("TemplateValue")
                        .HasForeignKey("FunctionTemplateID2");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FixtureFunctionChannel", b =>
                {
                    b.HasOne("LJWebsite.Models.Entities.FixtureFunction")
                        .WithMany("FixtureFunctionChannel")
                        .HasForeignKey("FixtureFunctionID1");
                });

            modelBuilder.Entity("LJWebsite.Models.Entities.FunctionTemplateChannel", b =>
                {
                    b.HasOne("LJWebsite.Models.Entities.FunctionTemplate")
                        .WithMany("TemplateChannel")
                        .HasForeignKey("FunctionTemplateID1");
                });
#pragma warning restore 612, 618
        }
    }
}
